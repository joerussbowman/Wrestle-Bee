Copyright 2011 Joseph Bowman. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice, this list
      of conditions and the following disclaimer in the documentation and/or other materials
      provided with the distribution.

THIS SOFTWARE IS PROVIDED BY JOSEPH BOWMAN ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JOSEPH BOWMAN OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those of the
authors and should not be interpreted as representing official policies, either expressed

ARCHITECTURE OVERVIEW

Wrestle Bee is a load balancer that uses a REST API for configuration
management. It also allows dynamic configuration, meaning no restarts
required to manage it's properties.

It's a scalable solution, written using Erlang/OTP allowing it to run
across multiple Erlang VMs on different physical hosts.

CORE

The core pieces are:

Nodes: Which are Erlang VM instances of the application.

Services: These are the externally accessible IP/Ports that traffic enters the
system through.

Devices: The load balanced end points.

Pools: Collections of devices to provide load balancing.

Basic connection flow is as follows.

CONNECTION FLOW

Request -> Service -> (load balanced using pool) -> Device

CONFIGURATION

Each node will have an open HTTP port by which configuration can be done using
REST API endpoints. Configuration is stored in a mnesia database used by all
nodes in the cluster.

As configuration is handled by REST, an export of the current configuration will
have the option of being delievered as bash script using curl to reimplement the
configuration. It will also have the option of being exported via JSON which
allow it to be simple to create interfaces using JSON and the REST endpoints.

MODULAR

The system will provide points to hook into for extending the functionality of
various endpoints. gen_event will be used to fire off data for which statistic
gathering or logging engines can be developed. 

For services, they can be extended to add extra functionality. Build static
file serving or even caching into your services freeing up the need to deploy
those as additional connections between the balancer and end points.

Pools can be extended by allowing custom health checking scripts to be created.
